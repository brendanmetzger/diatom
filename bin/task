#!/usr/bin/php

<?php chdir(dirname(__FILE__).'/..');
      define('CONF', parse_ini_file('data/config.ini', true));
      require 'src/kernel.php';



/**** ROUTING ****************************************************************/



Route::markdown(function($input = null) {
  include 'data/benchmarks/vendor/parsedown.php';

  $mark = new util\bench;
  // new Document("<article>".(new Parsedown())->text(file_get_contents('data/benchmarks/bootstrap.md'))."</article>");
  // new Document("<article>".(new Parsedown())->text(file_get_contents('data/benchmarks/fenced.md'))."</article>");
  // new Document("<article>".(new Parsedown())->text(file_get_contents('data/benchmarks/first.md'))."</article>");
  
  echo new Parser('data/benchmarks/first.md');
  echo "\n\n" . $mark->split('end', 'start');
});



Route::play(function() {
  $string = 'behavior canonical sections:|4';
  preg_match_all('/([a-z]+)(?:\:([^\s]+))?/i', $string, $matches, PREG_SET_ORDER|PREG_UNMATCHED_AS_NULL);
  foreach ($matches as $key => [$full, $method, $args]) {
    $matches[$method] = explode('|', $args);
    unset($matches[$key]);
  }
  print_r($matches);
});


Route::test(function() {
  // echo "A B C D E F";
  exec('stty -icanon');
  // stream_set_blocking($this->input, 0);
  while (1) {
    $key = ord(fgetc($this->input));
    echo $key;
    // if (27 === $key) {
    //   fgetc($this->input);
    //   $key = ord(fgetc($this->input));
    // }
    
    
    
    echo $key . "\n";
  }
  
  // for ($i=0; $i < 10; $i++) {
  //   sleep(1);
  //   echo "\e[1D";
  // }
  // $this->prompt("where is cursor\e[s\e[2DFF\e[u");
});


Route::plain(function() {
  $mca = '/Volumes/work/clients/mcachicago.org/mcachicago-scrape/mcachicago.org/The-Commons-Online.html';
  $check = 'views/pages/checklist.md';
  $list = 'data/benchmarks/lists.md';
  echo Parser::check(Document::open($list), 'md');

});



/*** IMPLEMENTATION **********************************************************/



try {

  Route::set('index', null, ['src' => 'bin/task']);

  $command = new Command(array_slice($argv,1));
  $output  = Route::delegate($command);
  
} catch (Exception | Error $e) {
  
  print_r($e->getTrace());
  $output  = sprintf("\n\033[0;31m%s\033[0m\n", $e->getMessage());
  $output .= sprintf("line %s in %s\n", $e->getLine(), $e->getFile());
  
} finally {


  echo $output;
  echo "\n- Finished {$command->action} -\n";
  exit($command->status);
  
}


