#!/usr/bin/env php

<?php chdir(dirname(__FILE__).'/../views'); // move to docroot for consistency with routing/templating
      require '../src/kernel.php';



/**** ROUTING ****************************************************************/


Route::bench(function () {
  $bench = new Util\Bench('start');
  $dir = '/Volumes/media/mcachicago.org/data/mcachicago.org';
  // $key = md5(array_reduce(scandir($dir, SCANDIR_SORT_NONE), fn($c, $i) => $c^filemtime($dir.'/'.$i), filemtime('index.php')));


  $init = 0;

  for ($i=1; $i < 10; $i++) {
    $init ^= crc32(join(['a' => 'c', 'c' => 'd', 'e' => 'f']) . $i);
  }

  echo $init . ' bit time = ' . $bench->split('bits', 'start');

  $init = [];
  for ($i=0; $i < 10; $i++) {
    $init[] = $i . join(['a' => 'b', 'c' => 'd', 'e' => 'f']);
  }

  echo "\n" . crc32(join($init)) . ' join time = ' . $bench->split('join', 'bits');

  return;
  // reduce
  for ($i=0; $i < 1000; $i++) {
    clearstatcache();
    $files = scandir($dir, SCANDIR_SORT_NONE);
    $key = md5(array_reduce($files, fn($c, $i) => $c^filemtime($dir.'/'.$i), filemtime('index.php')));
  }



  echo 'red = ' . $bench->split('reduce', 'start') . " {$key} \n";


  for ($i=0; $i < 1000; $i++) {
    clearstatcache();
    $files   = array_map(fn($p) => filemtime($dir.'/'.$p), scandir($dir, SCANDIR_SORT_NONE));
    $files[] = filemtime('index.php');
    $key = md5(join($files));
  }

  echo 'map = ' . $bench->split('map', 'reduce') . " {$key} \n";



  // check readdir vs glob
  // check non defined CONFIG
  return 'done';
});


Route::markdown(function($file = 'bootstrap', $type = 'local') {
  $file = 'data/benchmarks/'.$file.'.md';
  $mark = new util\bench;

  if ($type === 'local') {
    $out = Document::open($file);
  } else {
    include 'data/benchmarks/vendor/parsedown.php';
    $out = new Document("<article>".(new Parsedown())->text(file_get_contents($file))."</article>");
  }
  echo $out;
  echo "\n\n" . $mark->split('end', 'start');
});



Route::play(function() {
  $string = 'behavior canonical sections:|4';
  preg_match_all('/([a-z]+)(?:\:([^\s]+))?/i', $string, $matches, PREG_SET_ORDER|PREG_UNMATCHED_AS_NULL);
  foreach ($matches as $key => [$full, $method, $args]) {
    $matches[$method] = explode('|', $args);
    unset($matches[$key]);
  }
  print_r($matches);
});


Route::test(function() {
  // echo "A B C D E F";
  exec('stty -icanon');
  // stream_set_blocking($this->input, 0);
  while (1) {
    $key = ord(fgetc($this->input));
    echo $key;
    // if (27 === $key) {
    //   fgetc($this->input);
    //   $key = ord(fgetc($this->input));
    // }



    echo $key . "\n";
  }

  // for ($i=0; $i < 10; $i++) {
  //   sleep(1);
  //   echo "\e[1D";
  // }
  // $this->prompt("where is cursor\e[s\e[2DFF\e[u");
});

Route::socket(function() {
  // $sock = socket_create_listen(0);
  $sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
  // socket_getsockname($sock, $address, $port);
  $address = '127.0.0.1';
  $port    = 80100;
  socket_bind ($sock, $address, $port);

  echo "bin/task swrite {$address}:{$port} [query]\n";

  socket_listen($sock, 1);
  // socket_set_nonblock($sock);
  while (true) {
    $c = socket_accept($sock);
    socket_getpeername($c, $remote_address, $remote_port);
    echo $remote_address . "\n";
    socket_write($c, "listening to " . $remote_address);
    // socket_write($c, "query:\n");

    if ($query = socket_read($c, 1024, PHP_NORMAL_READ)) {
      echo "Run query; {$query}\n";
      socket_write($c, $query);

    } else {
      echo "Nothing happened\n";
      socket_write("nothing happende \n");
    }

    socket_close($c);
  }

  socket_close($sock);
});

Route::swrite(function ($domain, $query = '') {
  [$host, $port] = explode(':', $domain);

  echo $host  . "\n" . $port . "\n";
  $fp = fsockopen($host, $port, $errno, $errstr, 1);

  fwrite($fp, $query);
  while (!feof($fp)) {
    echo fgets($fp);
  }

  fclose($fp);
});


Route::plain(function() {
  $mca = '/Volumes/work/clients/mcachicago.org/mcachicago-scrape/mcachicago.org/The-Commons-Online.html';
  $check = 'views/pages/checklist.md';
  $list = 'data/benchmarks/blocks.md';
  $attrs = 'data/benchmarks/first.md';
  echo Parser::check(Document::open($attrs), 'md');

});



/*** IMPLEMENTATION **********************************************************/



try {

  Route::set('index', null, ['src' => 'bin/task']);

  $command = new Command(array_slice($argv,1));
  $output  = Route::delegate($command);

} catch (Exception | Error $e) {

  print_r($e->getTrace());
  $output  = sprintf("\n\033[0;31m%s\033[0m\n", $e->getMessage());
  $output .= sprintf("line %s in %s\n", $e->getLine(), $e->getFile());

} finally {


  echo $output;
  echo "\n- Finished {$command->action} -\n";
  exit($command->status);

}
